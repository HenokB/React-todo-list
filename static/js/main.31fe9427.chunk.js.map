{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ListItems","props","listItems","items","map","item","react_default","a","createElement","className","key","type","id","value","text","onChange","e","setUpdate","target","index_es","onClick","deleteItem","icon","react_flip_move_es","duration","easing","library","add","faTrash","App","_this","Object","classCallCheck","this","_super","call","state","currentItem","addItem","bind","assertThisInitialized","handleInput","preventDefault","newItem","concat","toConsumableArray","setState","Date","now","filteredItems","filter","console","log","onSubmit","placeholder","src_ListItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OC8BvBC,MAzBjB,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,IAAI,SAAAC,GAEzB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKL,EAAKK,KACzCJ,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,GAAIP,EAAKK,IAAKG,MAAOR,EAAKS,KAAMC,SAAU,SAACC,GAC1Df,EAAMgB,UAAUD,EAAEE,OAAOL,MAAMR,EAAKK,QACzCJ,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBV,UAAU,UAAUW,QAAS,WAC1CnB,EAAMoB,WAAWhB,EAAKK,MACvBY,KAAK,eAKZ,OAAOhB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BvB,oBChBTwB,IAAQC,IAAIC,SAoFGC,oDAjFb,SAAAA,EAAY5B,GAAM,IAAA6B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAI,EAAAC,KAAAF,KAAMhC,IACDmC,MAAQ,CACXjC,MAAM,GACNkC,YAAY,CACVvB,KAAK,GACLJ,IAAI,KAGRoB,EAAKQ,QAAUR,EAAKQ,QAAQC,KAAbR,OAAAS,EAAA,EAAAT,CAAAD,IACfA,EAAKW,YAAcX,EAAKW,YAAYF,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IACnBA,EAAKT,WAAaS,EAAKT,WAAWkB,KAAhBR,OAAAS,EAAA,EAAAT,CAAAD,IAClBA,EAAKb,UAAYa,EAAKb,UAAUsB,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IAZDA,6CAclB,SAAQd,GACNA,EAAE0B,iBACF,IAAMC,EAAUV,KAAKG,MAAMC,YAC3B,GAAmB,KAAhBM,EAAQ7B,KAAW,CACpB,IAAMX,EAAK,GAAAyC,OAAAb,OAAAc,EAAA,EAAAd,CAAOE,KAAKG,MAAMjC,OAAlB,CAAyBwC,IACtCV,KAAKa,SAAS,CACZ3C,MAAOA,EACPkC,YAAY,CACVvB,KAAK,GACLJ,IAAI,kCAKV,SAAYM,GACViB,KAAKa,SAAS,CACZT,YAAY,CACVvB,KAAME,EAAEE,OAAOL,MACfH,IAAKqC,KAAKC,mCAIhB,SAAWtC,GACT,IAAMuC,EAAehB,KAAKG,MAAMjC,MAAM+C,OAAO,SAAA7C,GAAI,OAC/CA,EAAKK,MAAMA,IACbuB,KAAKa,SAAS,CACZ3C,MAAO8C,6BAIX,SAAUnC,EAAKJ,GACbyC,QAAQC,IAAI,SAASnB,KAAKG,MAAMjC,OAChC,IAAMA,EAAQ8B,KAAKG,MAAMjC,MACzBA,EAAMC,IAAI,SAAAC,GACLA,EAAKK,MAAMA,IACZyC,QAAQC,IAAI/C,EAAKK,IAAK,OAAOA,GAC7BL,EAAKS,KAAMA,KAGfmB,KAAKa,SAAS,CACZ3C,MAAOA,0BAKZ,WACC,OAEEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,QAAMI,GAAG,aAAayC,SAAUpB,KAAKK,SACnChC,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAO2C,YAAY,qBAAqBzC,MAAQoB,KAAKG,MAAMC,YAAYvB,KAAMC,SAAUkB,KAAKQ,cACxGnC,EAAAC,EAAAC,cAAA,UAAQG,KAAK,UAAb,QAEFL,EAAAC,EAAAC,cAAA,SAAIyB,KAAKG,MAAMjC,MAAMW,MAEnBR,EAAAC,EAAAC,cAAC+C,EAAD,CAAWpD,MAAO8B,KAAKG,MAAMjC,MAAOkB,WAAYY,KAAKZ,WAAYJ,UAAWgB,KAAKhB,qBAvEzEuC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31fe9427.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\r\n             props.setUpdate(e.target.value,item.key)}}/>\r\n        <span>\r\n       \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    \r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport ListItems from './ListItems'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      items:[],\r\n      currentItem:{\r\n        text:'',\r\n        key:''\r\n      }\r\n    }\r\n    this.addItem = this.addItem.bind(this);\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n  addItem(e){\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if(newItem.text !==\"\"){\r\n      const items = [...this.state.items, newItem];\r\n    this.setState({\r\n      items: items,\r\n      currentItem:{\r\n        text:'',\r\n        key:''\r\n      }\r\n    })\r\n    }\r\n  }\r\n  handleInput(e){\r\n    this.setState({\r\n      currentItem:{\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n  }\r\n  deleteItem(key){\r\n    const filteredItems= this.state.items.filter(item =>\r\n      item.key!==key);\r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n\r\n  }\r\n  setUpdate(text,key){\r\n    console.log(\"items:\"+this.state.items);\r\n    const items = this.state.items;\r\n    items.map(item=>{      \r\n      if(item.key===key){\r\n        console.log(item.key +\"    \"+key)\r\n        item.text= text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n    \r\n   \r\n  }\r\n render(){\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <header>\r\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n          <input type=\"text\" placeholder=\"Add your list here\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\r\n          <button type=\"submit\">Add</button>\r\n        </form>\r\n        <p>{this.state.items.text}</p>\r\n        \r\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\r\n        \r\n      </header>\r\n      \r\n    </div>\r\n    \r\n  );\r\n }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}